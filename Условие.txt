1. Реализирайте клас Point2D, който има:
    Координата double x;
    Координата double y;
    Метод getDistanceTo, който приема Point2D и пресмята разстоянието до него от текущия обект.

2. Реализирайте клас Point3D, който наследява Point2D и има:
    Координата double z;
    Метод getDistanceTo, който приема Point3D и пресмята разстоянието до него от текущия обект.

3. Реализирайте абстрактен клас Entity, който има:
    id - Цяло число, генерира се автоматично, всеки обект има уникално id;
    name – string;
    location, който е или Point2D или Point3D
    Enum type, който ще следи какъв е типа на наследените класове на Entity. 
Пояснение: Или реализирайте Enum-а в класа Entity, или в глобалния scope, но ако е в глобалния внимавайте да не го замърсите
    Метод isAlive, който винаги връща true;
    Метод getDistanceTo2D, който приема Entity и връща разстоянието между него и текущия обект като третира location като Point2D;
    Метод getDistanceTo, който приема Entity и връща разстоянието до него от текущия обект.
Пояснение: Ако и двата обекта пазят 3D location, то трябва да се пресметне разстоянието им като се използват и трите координати. Ако поне единият обект има 2D location, то трябва да се пресметне разстоянието им като се използват само x,y координатите им.
    Метод moveTo, който приема аргумент Point3D или Point2D и променя location на текущия обект да е същия както на аргумента. 
Пояснение: Ако аргументът и location в текущия обект са от един и същ тип да се копира нормално. Ако аргументът и location са от различен тип да се
копира само информацията, която може. Ще се получи загуба на данни, но не е фатално.
    Метод moveTo, който приема Entity и променя location на текущия обект да е същия като на
подадения аргумент.
Пояснение: Използва същите правила като горния метод.

4. Реализирайте клас Player, който наследява Entity и има:
    Enum type = Player;
    damage - цяло число;
    health - цяло число;
    Метод isAlive, който връща true, ако health > 0;
    Метод attack, който приема Player или Mob и отнема damage от неговия health ако дистанцията между двата обекта е по-малка от 5;

5. Реализирайте клас NPC, който наследява Entity и има:
    Enum type = NPC;
    Метод isAlive, който винаги връща true;

6. Реализирайте клас Mob, който наследява Entity и има:
    Enum type = Mob;
    damage - цяло число;
    health - цяло число;
    Метод isAlive, който връща true, ако health > 0;
    Метдо attack, който приема Player и отнема damage от неговия health, ако дистанцията между двата обекта е по-малка от 5.

7. Реализирайте клас Environment, който има:
    entities - един vector, който може да съдържа Player и NPC и Mob vi;
    Метод add, който може да добавя Player, NPC и Mob към entities vii;
    Метод getAt, който по подаден индекс index връща елемента на позиция index в entities;
    Метод removeAt, който приема индекс index и премахва елемента на позиция index в entities;
    Метод generateEntities, който създава няколко Entity от различен тип и ги добавя към entities;
    Метод destroyEntities, който изчиства всички обекти в entities;
    Метод getClosestAliveEntity, който приема Player и Type и връща Entity от вектора entities, който е най-близко до подадения Player и има същия тип като подадения аргумент и е Alive.
    
8. Реализирайте главна програма, която:
    Създава един Player Player1;
    Създава Environment;
    Напълва Environment-а с няколко Entity от различен тип;
    Player1 минава и атакува всички Mob от Environment-а, като реда в който го прави е от найблизки, към най-далечни.
